//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication.OrderReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderReference.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddToCart", ReplyAction="http://tempuri.org/IOrderService/AddToCartResponse")]
        bool AddToCart(Model.ShoppingCartItemForAdding cart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddToCart", ReplyAction="http://tempuri.org/IOrderService/AddToCartResponse")]
        System.Threading.Tasks.Task<bool> AddToCartAsync(Model.ShoppingCartItemForAdding cart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/RemoveFromCart", ReplyAction="http://tempuri.org/IOrderService/RemoveFromCartResponse")]
        bool RemoveFromCart(int cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/RemoveFromCart", ReplyAction="http://tempuri.org/IOrderService/RemoveFromCartResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromCartAsync(int cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CreateOrder", ReplyAction="http://tempuri.org/IOrderService/CreateOrderResponse")]
        bool CreateOrder(string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CreateOrder", ReplyAction="http://tempuri.org/IOrderService/CreateOrderResponse")]
        System.Threading.Tasks.Task<bool> CreateOrderAsync(string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/PayForOrder", ReplyAction="http://tempuri.org/IOrderService/PayForOrderResponse")]
        bool PayForOrder(int orderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/PayForOrder", ReplyAction="http://tempuri.org/IOrderService/PayForOrderResponse")]
        System.Threading.Tasks.Task<bool> PayForOrderAsync(int orderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrder", ReplyAction="http://tempuri.org/IOrderService/GetOrderResponse")]
        Model.Order GetOrder(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrder", ReplyAction="http://tempuri.org/IOrderService/GetOrderResponse")]
        System.Threading.Tasks.Task<Model.Order> GetOrderAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/RemoveOrder", ReplyAction="http://tempuri.org/IOrderService/RemoveOrderResponse")]
        bool RemoveOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/RemoveOrder", ReplyAction="http://tempuri.org/IOrderService/RemoveOrderResponse")]
        System.Threading.Tasks.Task<bool> RemoveOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAll", ReplyAction="http://tempuri.org/IOrderService/GetAllResponse")]
        Model.Order[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAll", ReplyAction="http://tempuri.org/IOrderService/GetAllResponse")]
        System.Threading.Tasks.Task<Model.Order[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllForCustomer", ReplyAction="http://tempuri.org/IOrderService/GetAllForCustomerResponse")]
        Model.Order[] GetAllForCustomer(string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllForCustomer", ReplyAction="http://tempuri.org/IOrderService/GetAllForCustomerResponse")]
        System.Threading.Tasks.Task<Model.Order[]> GetAllForCustomerAsync(string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetShoppingCart", ReplyAction="http://tempuri.org/IOrderService/GetShoppingCartResponse")]
        Model.ShoppingCartItem[] GetShoppingCart(string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetShoppingCart", ReplyAction="http://tempuri.org/IOrderService/GetShoppingCartResponse")]
        System.Threading.Tasks.Task<Model.ShoppingCartItem[]> GetShoppingCartAsync(string customerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : WebApplication.OrderReference.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<WebApplication.OrderReference.IOrderService>, WebApplication.OrderReference.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddToCart(Model.ShoppingCartItemForAdding cart) {
            return base.Channel.AddToCart(cart);
        }
        
        public System.Threading.Tasks.Task<bool> AddToCartAsync(Model.ShoppingCartItemForAdding cart) {
            return base.Channel.AddToCartAsync(cart);
        }
        
        public bool RemoveFromCart(int cartId) {
            return base.Channel.RemoveFromCart(cartId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromCartAsync(int cartId) {
            return base.Channel.RemoveFromCartAsync(cartId);
        }
        
        public bool CreateOrder(string customerId) {
            return base.Channel.CreateOrder(customerId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateOrderAsync(string customerId) {
            return base.Channel.CreateOrderAsync(customerId);
        }
        
        public bool PayForOrder(int orderIds) {
            return base.Channel.PayForOrder(orderIds);
        }
        
        public System.Threading.Tasks.Task<bool> PayForOrderAsync(int orderIds) {
            return base.Channel.PayForOrderAsync(orderIds);
        }
        
        public Model.Order GetOrder(int orderId) {
            return base.Channel.GetOrder(orderId);
        }
        
        public System.Threading.Tasks.Task<Model.Order> GetOrderAsync(int orderId) {
            return base.Channel.GetOrderAsync(orderId);
        }
        
        public bool RemoveOrder(int id) {
            return base.Channel.RemoveOrder(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOrderAsync(int id) {
            return base.Channel.RemoveOrderAsync(id);
        }
        
        public Model.Order[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Model.Order[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Model.Order[] GetAllForCustomer(string customerId) {
            return base.Channel.GetAllForCustomer(customerId);
        }
        
        public System.Threading.Tasks.Task<Model.Order[]> GetAllForCustomerAsync(string customerId) {
            return base.Channel.GetAllForCustomerAsync(customerId);
        }
        
        public Model.ShoppingCartItem[] GetShoppingCart(string customerId) {
            return base.Channel.GetShoppingCart(customerId);
        }
        
        public System.Threading.Tasks.Task<Model.ShoppingCartItem[]> GetShoppingCartAsync(string customerId) {
            return base.Channel.GetShoppingCartAsync(customerId);
        }
    }
}
